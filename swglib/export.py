# vim: ai:sw=4:sts=4:expandtab

###########################################################
#
#  Author:        Ricardo Cardenes <rcardenes@gemini.edu>
#
#  2018-05-01 (rjc):
#      Started a GEA export module
###########################################################

import os
import subprocess
import xmlrpclib
from datetime import datetime
from itertools import izip
import numpy as np
from time import mktime

ARCHIVE_EXPORTER = '/gemsoft/opt/epics/extensions/bin/linux-x86_64/ArchiveExport'
ARCHIVE_EXPORT_DATA_PATH = '/gemsoft/var/data/gea/data/data/{source}/master_index'
ARCHIVE_SITE_URL = {
        'MK': 'http://geanorth.hi.gemini.edu/run/ArchiveDataServer.cgi',
        'CP': 'http://geasouth.cl.gemini.edu/run/ArchiveDataServer.cgi',
        }

def _format_value(value):
    if isinstance(value, float):
        if value > 900000000: # Likely a timestamp
            return '{0:.9f}'.format(value)
        else:
            return str(value)
    elif isinstance(value, datetime):
        return datetime.strftime(value, '%m/%d/%Y %H:%M:%S.%f')
    return str(value)

class ArchiveFileExporter(object):
    def __init__(self, source, bin_exec=ARCHIVE_EXPORTER):
        self.source = ARCHIVE_EXPORT_DATA_PATH.format(source=source)
        self.bin_exec = bin_exec

    def cmd_line_builder(self, channel, start, end, output=None):
        args = [channel, '-format', 'decimal',
                         '-start', "'{0}'".format(_format_value(start)),
                         '-end', "'{0}'".format(_format_value(end))]

        if output is not None:
            args.extend(['-output', output])

        return [self.bin_exec, self.source] + args

def split_timestamp_to_dt(sample):
    return np.datetime64(datetime.fromtimestamp(sample['secs'])) + np.timedelta64(sample['nano'], 'ns')

class ArchiveXmlRpcExporter(object):
    def __init__(self, site):
        self._keys = None
        self.server = xmlrpclib.Server(ARCHIVE_SITE_URL[site])

    def get_key(self, source):
        if self._keys is None:
            self._keys = dict((x['name'], x['key']) for x in self.server.archiver.archives())
        return self._keys[source]

    def _partial_retrieve(self, source, channel, start, end, prev_sample = None):
        ret = self.server.archiver.values(self.get_key(source), [channel], int(start), 0, int(end), 0, 10000, 0)[0]['values']
        if len(ret) > 0:
            if split_timestamp_to_dt(ret[0]) == prev_sample:
                ret = ret[1:]
            for sample in ret:
                yield (split_timestamp_to_dt(sample),) + tuple(sample['value'])

    def retrieve(self, source, channel, start, end):
        t1 = mktime(start.timetuple())
        t2 = mktime(end.timetuple())
        # Max samples is over the hard limit (10000)
        factor = 1000000.0   # Measuring at microseconds
        period = (t2 - t1) * factor
        rng = list(t1 + (np.arange(0, period, 600 * factor) / factor))
        if rng[-1] < t2:
            rng.append(t2)

        latest_timestamp = None
        for nt1, nt2 in izip(rng[:-1], rng[1:]):
            for sample in self._partial_retrieve(source, channel, nt1, nt2, latest_timestamp):
                yield sample
            else:
                latest_timestamp = sample[0]

export_header = """\
# Generated by SWG Export Tools v0.1
# Method: Raw Data

# Data for channel {channel} at {site} follows:
"""

# If site is not None, a remote connection is assumed
def archive_export(system, channel, output, start=None, end=None, site=None, overwrite=False):
    if not overwrite and os.path.exists(output):
        return True

    if site is None:
        cmd = ArchiveFileExporter(system).cmd_line_builder(channel, start=start, end=end, output=output)
        return subprocess.call(cmd) == 0
    else:
        with open(output, 'w+') as outfile:
            exporter = ArchiveXmlRpcExporter(site)
            outfile.write(export_header.format(channel=channel, site=site))
            for sample in exporter.retrieve(system, channel, start, end):
                outfile.write('\t'.join(tuple(_format_value(x) for x in sample)) + '\n')
        return True

if __name__ == '__main__':
    archive_export('mcs', 'mc:azDemandPos', start=datetime(2018, 5, 4), end=datetime(2018, 5, 4, 6), output='/tmp/azDemandPos.txt', site='MK', overwrite=True)
